name: üé® DeOldify CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f deoldify_core/requirements.txt ]; then pip install -r deoldify_core/requirements.txt; fi
        if [ -f deoldify_core/requirements-simple.txt ]; then pip install -r deoldify_core/requirements-simple.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test import statements
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import torch; print('PyTorch version:', torch.__version__)"
        python -c "import cv2; print('OpenCV version:', cv2.__version__)"
        python -c "import flask; print('Flask version:', flask.__version__)"
    
    - name: Test simple colorizer import
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from simple_colorizer import load_model, get_device
            print('‚úÖ Simple colorizer imports successful')
        except Exception as e:
            print('‚ö†Ô∏è Import test skipped (models not available):', e)
        "
    
    - name: Test Flask app
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from app import app
            print('‚úÖ Flask app imports successful')
        except Exception as e:
            print('‚ö†Ô∏è Flask test skipped:', e)
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
